apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        applicationId "com.egecius.test_gradle"
        minSdkVersion 11
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        free{

        }
        premium {

        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.0.0'
}

task testTask << {
    def myArray = []
    myArray.add("Vienas")
    myArray.add("Du")
    myArray.add("Trys")

    println myArray

    Collections.replaceAll(myArray, 'Vienas', 'Jedin')
    println myArray

    myArray = myArray - 'Du'
    println myArray

}

task sortLists << {
    def list = []
    list << "cows" << "horse" << "cat"

    println list

    def listSorted = list.sort(false)

    println "list: $list"

    println "listSorted: $listSorted"
}

task iterateRange << {
    def x = 0
    for (i in 0 .. 5) {
        x += i
        println x
    }
}

task iterateList << {
    def y = 0
    for (i in [6, 4, 2, 0]) {
        y += i
        println y
    }
}

task iterateArray << {
    def array = (0..5).toArray()
    def x = 0
    for (i in array) {
        x +=i
        println x
    }
}

task iterateMap << {
    def map = ['name':'LeBron', 'surname':"James", 'team':"Cavs"]
    def total
    for (i in map) {
        total += i.value
        println total
    }
}

task spreadOperator << {
    def list = ["Curry", "Jordan", "Bird"]
    println "list: $list"
    def convertedList = list*.toUpperCase()
    println "list: $list"
    println "convertedList: $convertedList"
}

task collect << {
    def list = ["Curry", "Jordan", "Bird"]
    def upperCaseList = list.collect {
        it?.toUpperCase()
    }
    println "list: $list"
    println "upperCaseList: $upperCaseList"
}

task typeConversion << {
    def list = ["Curry"]
    def upperCaseList = list.collect {
        it?.toUpperCase()
    }

    def clazz = upperCaseList.getClass()
    println clazz
}

def x = 5
task closureWithOutsideVariable << {
    def multiplyBy = { num ->
        num * x
    }
    println multiplyBy(10)
}
